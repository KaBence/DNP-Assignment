@page "/"
@using HttpClients.ClientInterfaces
@inject IPostService postService;
@inject NavigationManager navMgr

<PageTitle>Fake Reddit</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <p>Please login to see the posts.</p>
    </NotAuthorized>
    <Authorized>
        
        @if (posts == null)
        {
            <p>Loading...</p>
        }
        else if (!posts.Any())
        {
            <button class="createbtn" @onclick="SetModalTrue">Create a post</button>
            <p>No Todos to display</p>
        }
        else
        {
            <button class="createbtn" @onclick="SetModalTrue">Create a post</button>
            @foreach (var item in posts)
            {
                <div class="card" @onclick="@(() => navMgr.NavigateTo("/ViewPost/"+item.Id))">
                    @item.Title
                </div>
            }
        }
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: red">@msg</label>
        }
        <Modal ShowModal="showModal">
            <CreatePost onChange="Proceed"></CreatePost>
        </Modal>
    </Authorized>
</AuthorizeView>

@code
{
    private IEnumerable<global::Shared.Models.Post>? posts;
    private string msg = ""; 
    private bool doShowFilters = false;

    private string? usernameFilter;
    private int? userIdFilter;
    private string? titleContainsFilter;
    
    private bool showModal=false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    
    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/",true);
    }

    private void SetModalTrue()
    {
        showModal = true;
    }
    
    
    private async Task LoadPosts()
    {
        try
        {
            posts = await postService.GetAsync(usernameFilter, userIdFilter, titleContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
